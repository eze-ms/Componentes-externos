{"ast":null,"code":"import { LIST_MOVIE, PELICULA_CREATE, PELICULA_DELETE, READ_PELICULA, UPDATE_PELICULA } from '../actions/actionsTypes';\nimport { listMovies, readMovie, writeMovie, createMovie, deleteMovie } from '../../api';\nlet datosIniciales = {\n  siguiente_id: 4,\n  peliculas: [{\n    id: 1,\n    titulo: 'Pelicula 1',\n    anyoEstreno: 2020,\n    mensaje: '',\n    director: ''\n  }, {\n    id: 2,\n    titulo: 'Pelicula 2',\n    anyoEstreno: 2019,\n    mensaje: '',\n    director: ''\n  }, {\n    id: 3,\n    titulo: 'Pelicula 3',\n    anyoEstreno: 2021,\n    mensaje: '',\n    director: ''\n  }],\n  editable: {\n    id: -1,\n    titulo: '',\n    anyoEstreno: 0,\n    mensaje: '',\n    director: ''\n  }\n};\nlet reducer = (estado = datosIniciales, accion) => {\n  switch (accion.type) {\n    case LIST_MOVIE:\n      {\n        /*\r\n        let listaPeli = accion.data;\r\n        listaPeli.id = estado.siguiente_id;\r\n        estado.peliculas.push(listaPeli);\r\n        estado.siguiente_id++;\r\n        */\n\n        const nuevo_estado = {\n          ...estado\n        };\n        return nuevo_estado;\n      }\n    case PELICULA_CREATE:\n      {\n        let nuevaPeli = accion.data;\n        nuevaPeli.id = estado.siguiente_id;\n        estado.peliculas.push(nuevaPeli);\n        estado.siguiente_id++;\n        const nuevo_estado = {\n          ...estado\n        };\n        return nuevo_estado;\n      }\n    case PELICULA_DELETE:\n      {\n        let id = accion.id;\n        estado.peliculas = estado.peliculas.filter(item => {\n          return item.id !== id;\n        });\n        const nuevo_estado = {\n          ...estado\n        };\n        return nuevo_estado;\n      }\n    case READ_PELICULA:\n      {\n        const id = parseInt(accion.id);\n        const peliculaEncontrada = estado.peliculas.find(pelicula => pelicula.id === id);\n\n        // ** Si no se encuentra la película, se devuelve el estado sin cambios ** //\n        if (!peliculaEncontrada) {\n          return estado;\n        }\n        estado.editable = peliculaEncontrada;\n        //**/ Devuelve el estado con la película encontrada **//\n        const nuevo_estado = {\n          ...estado\n        };\n        return nuevo_estado;\n      }\n    case UPDATE_PELICULA:\n      {\n        const {\n          id,\n          pelicula\n        } = accion.payload;\n\n        //** Busca la película a actualizar en la lista de películas **//\n        const peliculaActualizada = estado.peliculas.find(p => p.id == id); //porque es uno es string y el otro un número\n\n        if (!peliculaActualizada) {\n          //** Si la película no se encuentra, devuelve el estado sin cambios **//\n          return estado;\n        }\n        peliculaActualizada.titulo = pelicula.titulo;\n        peliculaActualizada.anyoEstreno = pelicula.anyoEstreno;\n        peliculaActualizada.mensaje = pelicula.mensaje;\n        peliculaActualizada.director = pelicula.director;\n\n        // Devuelve un nuevo estado con la lista de películas actualizada //\n        const nuevo_estado = {\n          ...estado\n        };\n        return nuevo_estado;\n      }\n    default:\n      return estado;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["LIST_MOVIE","PELICULA_CREATE","PELICULA_DELETE","READ_PELICULA","UPDATE_PELICULA","listMovies","readMovie","writeMovie","createMovie","deleteMovie","datosIniciales","siguiente_id","peliculas","id","titulo","anyoEstreno","mensaje","director","editable","reducer","estado","accion","type","nuevo_estado","nuevaPeli","data","push","filter","item","parseInt","peliculaEncontrada","find","pelicula","payload","peliculaActualizada","p"],"sources":["/Users/ezequielmacchi1/MAUI-1/src/redux/reducers/reducer.js"],"sourcesContent":["import { LIST_MOVIE, PELICULA_CREATE, PELICULA_DELETE, READ_PELICULA, UPDATE_PELICULA } from '../actions/actionsTypes';\r\nimport { listMovies, readMovie, writeMovie, createMovie, deleteMovie } from '../../api';\r\n\r\nlet datosIniciales = {\r\n  siguiente_id: 4,\r\n  peliculas: [\r\n    { id: 1, titulo: 'Pelicula 1', anyoEstreno: 2020, mensaje: '', director: '' },\r\n    { id: 2, titulo: 'Pelicula 2', anyoEstreno: 2019, mensaje: '', director: '' },\r\n    { id: 3, titulo: 'Pelicula 3', anyoEstreno: 2021, mensaje: '', director: '' },\r\n  ],\r\n  editable: {\r\n    id: -1,\r\n    titulo: '',\r\n    anyoEstreno: 0,\r\n    mensaje: '',\r\n    director: '',\r\n  }\r\n};\r\n\r\nlet reducer = (estado = datosIniciales, accion) => {\r\n  switch (accion.type) {\r\n    case LIST_MOVIE: {\r\n      /*\r\n      let listaPeli = accion.data;\r\n      listaPeli.id = estado.siguiente_id;\r\n      estado.peliculas.push(listaPeli);\r\n      estado.siguiente_id++;\r\n      */\r\n\r\n      const nuevo_estado = { ...estado };\r\n      return nuevo_estado;\r\n    }\r\n\r\n\r\n\r\n    case PELICULA_CREATE: {\r\n      let nuevaPeli = accion.data;\r\n      nuevaPeli.id = estado.siguiente_id;\r\n      estado.peliculas.push(nuevaPeli);\r\n      estado.siguiente_id++;\r\n\r\n      const nuevo_estado = { ...estado };\r\n        return nuevo_estado;\r\n    }\r\n\r\n    case PELICULA_DELETE: {\r\n      let id = accion.id;\r\n      estado.peliculas = estado.peliculas.filter((item) => {\r\n        return item.id !== id;\r\n      });\r\n\r\n      const nuevo_estado = { ...estado };\r\n        return nuevo_estado;\r\n    }\r\n\r\n    case READ_PELICULA: {\r\n      \r\n      const id = parseInt(accion.id);\r\n      const peliculaEncontrada = estado.peliculas.find((pelicula) => pelicula.id === id);\r\n      \r\n// ** Si no se encuentra la película, se devuelve el estado sin cambios ** //\r\n      if (!peliculaEncontrada) {\r\n        return estado;\r\n      }\r\n      estado.editable = peliculaEncontrada;\r\n//**/ Devuelve el estado con la película encontrada **//\r\n      const nuevo_estado = { ...estado };\r\n        return nuevo_estado;\r\n    }\r\n    case UPDATE_PELICULA: {\r\n      const { id, pelicula } = accion.payload;\r\n\r\n//** Busca la película a actualizar en la lista de películas **//\r\n      const peliculaActualizada = estado.peliculas.find((p) => p.id == id); //porque es uno es string y el otro un número\r\n    \r\n      if (!peliculaActualizada) {\r\n//** Si la película no se encuentra, devuelve el estado sin cambios **//\r\n        return estado;\r\n      }\r\n\r\n      peliculaActualizada.titulo = pelicula.titulo;\r\n      peliculaActualizada.anyoEstreno = pelicula.anyoEstreno;\r\n      peliculaActualizada.mensaje = pelicula.mensaje;\r\n      peliculaActualizada.director = pelicula.director;\r\n    \r\n// Devuelve un nuevo estado con la lista de películas actualizada //\r\n      const nuevo_estado = { ...estado };\r\n      return nuevo_estado;\r\n    }\r\n    default:\r\n      return estado;\r\n  }\r\n};\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}